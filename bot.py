import asyncio
import os
import re
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤
KYIV_TZ = pytz.timezone("Europe/Kiev")

# ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# üìå –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. üïí\n\n"
                         "üìå –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
                         "`/time 30m –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É`\n"
                         "`/time 2h –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É`\n\n"
                         "–ü—Ä–∏–º–µ—Ä: `/time 10m –ü–µ—Ä–µ–∫—É—Å–∏—Ç—å üçè`", parse_mode="Markdown")

@dp.message(Command("time"))
async def time_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è"""
    args = message.text.split(maxsplit=2)  # üü¢ –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç: /time 30m –¢–ï–ö–°–¢

    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/time 30m –¢–ï–ö–°–¢`\n\n–ü—Ä–∏–º–µ—Ä:\n"
                             "`/time 10m –ü–µ—Ä–µ–∫—É—Å–∏—Ç—å üçè`\n"
                             "`/time 2h –í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º`", parse_mode="Markdown")
        return

    time_str, text = args[1], args[2]

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ "30m" –∏–ª–∏ "2h"
    match = re.match(r"^(\d+)([mh])$", time_str)

    if not match:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π `30m` –∏–ª–∏ `2h`.", parse_mode="Markdown")
        return

    amount, unit = int(match.group(1)), match.group(2)
    delay = amount * 60 if unit == "m" else amount * 3600
    remind_time = datetime.now(KYIV_TZ) + timedelta(seconds=delay)

    chat_id = message.chat.id
    reminder_id = len(reminders.get(chat_id, [])) + 1
    if chat_id not in reminders:
        reminders[chat_id] = []
    reminders[chat_id].append((reminder_id, remind_time, text))

    scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[chat_id, reminder_id])

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {amount}{unit}.\n"
                         f"üìÖ {remind_time.strftime('%H:%M')} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")

async def send_reminder(chat_id, reminder_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if chat_id in reminders:
        for reminder in reminders[chat_id]:
            if reminder[0] == reminder_id:
                await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder[2]}")
                reminders[chat_id].remove(reminder)
                break

async def main():
    scheduler.start()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –∏ /time.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
