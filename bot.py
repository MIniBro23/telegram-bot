import asyncio
import os
import re
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤
KYIV_TZ = pytz.timezone("Europe/Kiev")

# ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# üìå –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
    ])

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. üïí\n\n"
                         "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.", 
                         reply_markup=main_menu())

@dp.callback_query(lambda c: c.data == "add_reminder")
async def select_reminder_type(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞ –¥–∞—Ç—É)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è (30m, 2h)", callback_data="remind_time")],
        [InlineKeyboardButton(text="üìÖ –ù–∞ –¥–∞—Ç—É (10.02 13:13)", callback_data="remind_date")]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏, –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "history")
async def show_history(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    chat_id = callback_query.from_user.id
    if chat_id not in reminders or not reminders[chat_id]:
        await callback_query.message.edit_text("üìú –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_menu())
        return
    
    history_text = "üìú **–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for i, (reminder_id, remind_time, text) in enumerate(reminders[chat_id], 1):
        history_text += f"üìå {i}. {remind_time.strftime('%d.%m %H:%M')} ‚Äì {text}\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"delete_{reminder_id}")
        ])

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")])
    await callback_query.message.edit_text(history_text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_reminder(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    chat_id = callback_query.from_user.id
    reminder_id = int(callback_query.data.split("_")[1])

    if chat_id in reminders:
        reminders[chat_id] = [r for r in reminders[chat_id] if r[0] != reminder_id]
        await callback_query.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É–¥–∞–ª–µ–Ω–æ!")
        await show_history(callback_query)

@dp.callback_query(lambda c: c.data == "back")
async def back_to_main(callback_query: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.edit_text("üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=main_menu())

async def set_reminder(message: types.Message, remind_time: datetime, text: str):
    """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    chat_id = message.chat.id
    reminder_id = len(reminders.get(chat_id, [])) + 1
    if chat_id not in reminders:
        reminders[chat_id] = []
    reminders[chat_id].append((reminder_id, remind_time, text))

    scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[chat_id, reminder_id])

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                         f"üìÖ {remind_time.strftime('%d.%m %H:%M')} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)",
                         reply_markup=main_menu())

async def send_reminder(chat_id, reminder_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if chat_id in reminders:
        for reminder in reminders[chat_id]:
            if reminder[0] == reminder_id:
                await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder[2]}")
                reminders[chat_id].remove(reminder)
                break

async def main():
    scheduler.start()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
