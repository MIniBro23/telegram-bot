import asyncio
import os
import re
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤
KYIV_TZ = pytz.timezone("Europe/Kiev")

# ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# üìå –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}
user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")]
    ])

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. üïí\n\n"
                         "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.", 
                         reply_markup=main_menu())

@dp.callback_query(lambda c: c.data == "add_reminder")
async def select_reminder_type(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞ –¥–∞—Ç—É)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è (30m, 2h)", callback_data="remind_time")],
        [InlineKeyboardButton(text="üìÖ –ù–∞ –¥–∞—Ç—É (10.02 13:13)", callback_data="remind_date")]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏, –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "remind_time")
async def ask_time_format(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 30m, 2h"""
    user_states[callback_query.from_user.id] = "waiting_time"
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `30m`, `2h` –∏ —Ç–µ–∫—Å—Ç.\n\n"
                                           "–ü—Ä–∏–º–µ—Ä: `30m –ü–µ—Ä–µ–∫—É—Å–∏—Ç—å üçè`", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "remind_date")
async def ask_date_format(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10.02 13:13"""
    user_states[callback_query.from_user.id] = "waiting_date"
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–¥–¥.–º–º —á—á:–º–º` –∏ —Ç–µ–∫—Å—Ç.\n\n"
                                           "–ü—Ä–∏–º–µ—Ä: `10.02 13:13 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É`", parse_mode="Markdown")

@dp.message()
async def process_user_input(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = message.from_user.id
    if user_id not in user_states:
        return

    user_state = user_states[user_id]
    del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    if user_state == "waiting_time":
        await process_time_reminder(message)
    elif user_state == "waiting_date":
        await process_date_reminder(message)

async def process_time_reminder(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤"""
    args = message.text.strip().split(None, 1)

    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `30m –¢–ï–ö–°–¢` –∏–ª–∏ `2h –¢–ï–ö–°–¢`")
        return

    time_str = args[0].strip()
    text = args[1].strip()
    match_relative = re.match(r"^(\d+)([mh])$", time_str)

    if match_relative:
        amount, unit = int(match_relative.group(1)), match_relative.group(2)
        delay = amount * 60 if unit == "m" else amount * 3600
        remind_time = datetime.now(KYIV_TZ) + timedelta(seconds=delay)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π `30m` –∏–ª–∏ `2h`.", parse_mode="Markdown")
        return

    await set_reminder(message, remind_time, text)

async def process_date_reminder(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    args = message.text.strip().split(None, 2)

    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–¥–¥.–º–º —á—á:–º–º –¢–ï–ö–°–¢`")
        return

    time_str = f"{args[0]} {args[1]}"
    text = args[2].strip()
    match_absolute = re.match(r"^(\d{2})\.(\d{2}) (\d{2}):(\d{2})$", time_str)

    if match_absolute:
        try:
            day, month, hour, minute = map(int, match_absolute.groups())
            now = datetime.now(KYIV_TZ)
            year = now.year
            remind_time = KYIV_TZ.localize(datetime(year, month, day, hour, minute))
        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è.")
            return

        if remind_time < now:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π `–¥–¥.–º–º —á—á:–º–º`.", parse_mode="Markdown")
        return

    await set_reminder(message, remind_time, text)

async def set_reminder(message: types.Message, remind_time: datetime, text: str):
    """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    chat_id = message.chat.id
    reminder_id = len(reminders.get(chat_id, [])) + 1
    if chat_id not in reminders:
        reminders[chat_id] = []
    reminders[chat_id].append((reminder_id, remind_time, text))

    scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[chat_id, reminder_id])

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                         f"üìÖ {remind_time.strftime('%d.%m %H:%M')} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)",
                         reply_markup=main_menu())

async def send_reminder(chat_id, reminder_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if chat_id in reminders:
        for reminder in reminders[chat_id]:
            if reminder[0] == reminder_id:
                await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder[2]}")
                reminders[chat_id].remove(reminder)
                break

async def main():
    scheduler.start()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
