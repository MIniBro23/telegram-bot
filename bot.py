import asyncio
import re
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

TOKEN = os.getenv("7654324736:AAHHU91BadBbPxSrkvI9Y9O-T1GmmfJgBnU")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# üìå –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

# üìå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>.\n\n–ü—Ä–∏–º–µ—Ä:\n/remind 30m –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É\n/remind 2h –ü–æ–π—Ç–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `/remind 30m –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É` –∏–ª–∏ `/remind 2h –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É`.")

@dp.message(Command("remind"))
async def remind_handler(message: types.Message):
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n\n–ü—Ä–∏–º–µ—Ä:\n/remind 30m –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É\n/remind 2h –ü–æ–π—Ç–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É")
        return

    time_str, text = args[1], args[2]
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç—ã: "30m", "2h")
    match = re.match(r"(\d+)([mh])", time_str)
    if not match:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π:\n- `Xm` (–º–∏–Ω—É—Ç—ã)\n- `Xh` (—á–∞—Å—ã)\n\n–ü—Ä–∏–º–µ—Ä:\n/remind 45m –ü–∞—É–∑–∞\n/remind 3h –í—Å—Ç—Ä–µ—á–∞", parse_mode="Markdown")
        return

    amount, unit = int(match.group(1)), match.group(2)
    delay = amount * 60 if unit == "m" else amount * 3600  # –ú–∏–Ω—É—Ç—ã –∏–ª–∏ —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    remind_time = datetime.now() + timedelta(seconds=delay)

    chat_id = message.chat.id
    reminder_id = len(reminders.get(chat_id, [])) + 1
    if chat_id not in reminders:
        reminders[chat_id] = []
    reminders[chat_id].append((reminder_id, remind_time, text))

    scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[chat_id, reminder_id])

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {amount} {'–º–∏–Ω—É—Ç' if unit == 'm' else '—á–∞—Å–æ–≤'}.")

async def send_reminder(chat_id, reminder_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if chat_id in reminders:
        for reminder in reminders[chat_id]:
            if reminder[0] == reminder_id:
                await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder[2]}")
                reminders[chat_id].remove(reminder)
                break

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def list_reminders_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    chat_id = message.chat.id
    if chat_id not in reminders or len(reminders[chat_id]) == 0:
        await message.answer("üîπ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    text = "üìã *–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
    for reminder in reminders[chat_id]:
        time_left = (reminder[1] - datetime.now()).total_seconds() // 60
        text += f"üîπ *#{reminder[0]}* ‚Äì {reminder[2]} (–æ—Å—Ç–∞–ª–æ—Å—å ~{int(time_left)} –º–∏–Ω)\n"

    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("remove"))
async def remove_reminder_handler(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"""
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/remove <ID>`\n\n–ü—Ä–∏–º–µ—Ä:\n`/remove 1`", parse_mode="Markdown")
        return

    reminder_id = int(args[1])
    chat_id = message.chat.id

    if chat_id in reminders:
        for reminder in reminders[chat_id]:
            if reminder[0] == reminder_id:
                reminders[chat_id].remove(reminder)
                await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É–¥–∞–ª–µ–Ω–æ.")
                return

    await message.answer("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def main():
    scheduler.start()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")  # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
