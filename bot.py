import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

TOKEN = "7654324736:AAHHU91BadBbPxSrkvI9Y9O-T1GmmfJgBnU"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# üìå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>.\n\n–ü—Ä–∏–º–µ—Ä:\n/remind 30m –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É\n/remind 2h –ü–æ–π—Ç–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É", reply_markup=main_keyboard)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `/remind 30m –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É` –∏–ª–∏ `/remind 2h –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É`.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def list_reminders_handler(message: types.Message):
    await message.answer("–ü–æ–∫–∞ —è –Ω–µ —Ö—Ä–∞–Ω—é —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –Ω–æ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! üòâ")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
